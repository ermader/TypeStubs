"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod

"""\
Provides the Lookup class, which describes on OpenType lookup
in the form needed for FontDocTools, subclasses for GSUB and
GPOS lookups, as well as several supporting classes.
"""
class LookupFlag(ABC):
    """\
    Represents an OpenType lookup flag and the associated mark filtering set, if used.
    – rightToLeft: whether the last glyph in a sequence of cursive attachments (GPOS lookup type 3) should be positioned on the baseline.
    – ignoreBaseGlyphs: whether base glyphs should be ignored when applying the lookup.
    – ignoreLigatures: whether ligatures should be ignored when applying the lookup.
    – ignoreMarks: whether marks should be ignored when applying the lookup.
    – markAttachmentType: the number of the mark attachment class whose glyphs should be ignored, or None.
    – markFilteringSet: the number of the mark filtering set by which marks should be filtered, or None.
    """
    def __init__(self, numericValue, markFilteringSet) -> None:
        """\
        Constructs a LookupFlag object from the given numeric lookup flag value and, if indicated by the flag, the associated mark filtering set.
        """
        ...
    
    @classmethod
    def forTTLookup(cls, ttLookup): # -> LookupFlag:
        """\
        Returns a LookupFlag object with the lookup flag and, if needed, mark filtering set from the given lookup in fonttools format.
        """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def isZero(self):
        """\
        Returns whether the OpenType value of the lookup flag is 0, the default value.
        """
        ...
    


UnsupportedSubtable = ...
ContextualRule = ...
FontAccessors = ...
class Lookup:
    """\
    Represents an OpenType lookup.
    """
    def __init__(self, index, lookupType, lookupFlag, subtables, isSimplified=...) -> None:
        """\
        Constructs a Lookup object.
        – index: the index of the lookup within the table.
        – lookupType: the lookup type; separate enumerations for GSUB and GPOS.
        – lookupFlag: the lookup flag represented by a LookupFlag object.
        – subtables: list of subtables.
        """
        ...
    
    @abstractmethod
    def isContextual(self): # -> None:
        """\
        Returns whether the lookup is contextual.
        """
        ...
    
    @abstractmethod
    def inputOutputLengths(self, allowNested=...): # -> None:
        """\
        Returns a tuple (inputLength, outputLength) indicating the length of the input consumed
        and the output generated by this lookup.
        None is returned for each tuple member where the length can’t be determined or varies
        between rules within the lookup.
        If allowNested is True, then we look at one level of nested lookups for contextual
        lookups to determine the lengths before giving up.
        """
        ...
    
    @abstractmethod
    def simplifyContextualRule(self, rule): # -> None:
        """\
        Returns a simplified contextual rule if the given rule can be represented in
        a simplified way; None otherwise.
        The given rule must be part of this lookup.
        """
        ...
    
    def simplified(self): # -> Lookup | Self@Lookup | Literal[True] | None:
        """\
        Returns a version of this lookup where all contextual rules have been replaced with their simplified
        versions.
        Returns this lookup itself if it doesn’t have contextual rules.
        Returns None if any of the rules can’t be simplified.
        """
        ...
    
    def filtered(self, inputGlyphs):
        """\
        Returns a version of this lookup where substitutions or positionings that
        obviously can’t apply to the given input glyphs are removed.
        If nothing can be removed, returns self.
        """
        ...
    


SimplifiedContextualSubstitution = ...
class GSUBLookup(Lookup):
    """\
    Represents an OpenType GSUB lookup.
    """
    def __init__(self, index, lookupType, lookupFlag, subtables, isSimplified=...) -> None:
        """\
        Constructs a GSUBLookup object.
        – index: the index of the lookup within the table.
        – lookupType: the lookup type; separate enumerations for GSUB and GPOS.
        – lookupFlag: the lookup flag represented by a LookupFlag object.
        – subtables: list of subtables.
        """
        ...
    
    @classmethod
    def forTTLookup(cls, ttLookup, index, fontAccessors):
        """\
        Returns a Lookup object for the given lookup in fonttools format, with nested lookups obtained from fontAccessors.
        Subtables for lookup types or subtable formats that the GSUB specification describes
        but that are currently not supported are returned as an UnsupportedSubtable object.
        """
        ...
    
    def isContextual(self): # -> bool:
        """\
        Returns whether the lookup is contextual.
        """
        ...
    
    def inputOutputLengths(self, allowNested=...):
        """\
        Returns a tuple (inputLength, outputLength) indicating the length of the input consumed
        and the output generated by this GSUB lookup.
        None is returned for each tuple member where the length can’t be determined or varies
        between substitutions within the lookup.
        If allowNested is True, then we look at one level of nested lookups for contextual
        substitution lookups to determine the lengths before giving up.
        """
        ...
    
    def simplifyContextualRule(self, rule): # -> SimplifiedContextualSubstitution | None:
        """\
        Returns a simplified contextual substitution if the given substitution can be represented in
        a simplified way; None otherwise.
        The given substitution must be part of this lookup.
        """
        ...
    


class PositioningValues:
    """\
    Represents the parts of an OpenType GPOS ValueRecord that we care about.
    https://docs.microsoft.com/en-us/typography/opentype/spec/gpos#valueRecord
    """
    def __init__(self, xPlacement, yPlacement, xAdvance, yAdvance) -> None:
        ...
    
    _zero = ...
    @classmethod
    def zero(cls): # -> PositioningValues:
        """\
        Returns a PositioningValues object where all values are 0.
        """
        ...
    
    @classmethod
    def forTTValueRecord(cls, ttValueRecord): # -> PositioningValues:
        """\
        Returns a PositioningValues object for the given value record in fonttools format.
        Returns zero() if ttValueRecord is None.
        """
        ...
    
    def isZero(self):
        """\
        Returns whether all positioning values in this object are 0.
        """
        ...
    


SimplifiedContextualPositioning = ...
class GPOSLookup(Lookup):
    """\
    Represents an OpenType GPOS lookup.
    """
    def __init__(self, index, lookupType, lookupFlag, subtables, isSimplified=...) -> None:
        """\
        Constructs a GPOSLookup object.
        – index: the index of the lookup within the table.
        – lookupType: the lookup type; separate enumerations for GSUB and GPOS.
        – lookupFlag: the lookup flag represented by a LookupFlag object.
        – subtables: list of subtables.
        """
        ...
    
    @classmethod
    def forTTLookup(cls, ttLookup, index, fontAccessors):
        """\
        Returns a Lookup object for the given lookup in fonttools format, with nested lookups obtained from fontAccessors.
        Subtables for lookup types or subtable formats that the GPOS specification describes
        but that are currently not supported are returned as an UnsupportedSubtable object.
        """
        ...
    
    def isContextual(self): # -> bool:
        """\
        Returns whether the lookup is contextual.
        """
        ...
    
    def inputOutputLengths(self, allowNested=...):
        """\
        Returns a tuple (inputLength, outputLength) indicating the length of the input consumed
        and the output generated by this GPOS lookup.
        For GPOS lookups, outputLength is always equal to inputLength.
        None is returned for each tuple member where the length can’t be determined or varies
        between positioning within the lookup.
        If allowNested is True, then we look at one level of nested lookups for contextual
        positioning lookups to determine the lengths before giving up.
        """
        ...
    
    def simplifyContextualRule(self, rule): # -> SimplifiedContextualPositioning | None:
        """\
        Returns a simplified contextual positioning if the given positioning can be represented in
        a simplified way; None otherwise.
        The given positioning must be part of this lookup.
        """
        ...
    


