"""
This type stub file was generated by pyright.
"""

"""\
Provides the Font class, which accesses the contents
of a font in a TrueType container in the form needed
for FontDocTools.
"""

import typing

from fontTools.ttLib import TTFont, _TTGlyphSet
from FontDocTools.Lookup import GSUBLookup, GPOSLookup

GlyphNameDict = dict[str, typing.Any]
GlyphNameList = list[str]

LookupDict = dict[int, set[str]]
FeatureDict = dict[str, LookupDict]
OTFeatures = tuple[FeatureDict, set[str]]

AnchorPoint = tuple[int, int]
AnchorSet = set[AnchorPoint]

class Font:
    """\
    Provides access to the contents of a font in a TrueType
    container in the form needed for FontDocTools.
    """

    _ttFont: TTFont = ...
    _glyphs: dict[str, Glyph] = ...
    _ttGlyphSet: _TTGlyphSet = ...
    def __init__(
        self,
        fontFile: str,
        fontName: typing.Optional[str] = ...,
        fontNumber: typing.Optional[int] = ...,
        aliasFile: typing.Optional[str] = ...,
    ) -> None:
        """\
        Constructs a Font object with the given font file name and, for TrueType font collections,
        the PostScript name or the font number of the desired font.
        If fontFile indicates a .ttc or .otc font file, and neither fontName nor fontNumber is provided,
        an error is raised that includes the names of all fonts within the file.
        """
        ...
    def postScriptName(
        self,
    ) -> str:  # calls _getPostScriptName(), which may returns None if postscript name not found, but should probably return ""
        """\
        Returns the PostScript name from this font’s name table.
        """
        ...
    def _hasTable(self, name: str) -> bool:
        """\
        Returns whether this font has a table with the given name.
        """
        ...
    def table(self, name: str) -> typing.Optional[typing.Any]:
        """\
        Returns the font’s table with the given name if it exists; None otherwise.
        """
        ...
    def isAATFont(self) -> bool:
        """\
        Returns whether the font is an AAT font.
        """
        ...
    def supportsVerticalLayout(self) -> bool:
        """\
        Returns whether the font includes the tables necessary to support vertical layout.
        """
        ...
    def unitsPerEm(self) -> int:
        """\
        Returns the units per em from this font’s head table.
        """
        ...
    def modifiedAsUnixTime(self) -> int:
        """\
        Returns the modification time stamp from this font’s head table,
        converted to the Unix epoch 1970-01-01T00:00:00Z.
        """
        ...
    def modifiedAsString(self) -> str:
        """\
        Returns the modification time stamp from this font’s head table,
        converted to a string in the user’s locale.
        """
        ...
    def ascender(self) -> int:
        """\
        Returns the ascender from this font’s hhea table.
        """
        ...
    def descender(self) -> int:
        """\
        Returns the descender from this font’s hhea table.
        """
        ...
    def vertAscender(self) -> int:
        """\
        Returns the vertical ascender from this font’s vhea table.
        """
        ...
    def vertDescender(self) -> int:
        """\
        Returns the vertical descender from this font’s vhea table.
        """
        ...
    def lineHeight(self) -> int:
        """\
        Returns the line height for horizontal text, calculated from the ascender,
        descender, and lineGap fields of this font’s hhea table.
        """
        ...
    def lineWidth(self) -> int:
        """\
        Returns the line width for vertical text, calculated from the
        vertTypoAscender, vertTypoDescender, and vertTypoLineGap
        fields of this font’s vhea table.
        """
        ...
    def fontMetric(self, tableName: str, metric: str) -> int:
        """\
        Returns the requested metric from the specified font table.
        Supported metrics are specified in the section
        “Expressions for font metrics” of the GlyphPlotter manual.
        """
        ...
    def fontNameEntry(self, nameID: int, language: typing.Optional[str]) -> str:
        """\
        Returns a name table entry for the given name ID and language.
        Entries for Unicode, Windows Unicode, and Macintosh Roman platforms are searched in this order.
        """
        ...
    def glyphCount(self) -> int:
        """\
        Returns the number of glyphs in this font.
        """
        ...
    def _ttGlyphName(self, glyphName: str) -> str: ...
    def glyphClasses(
        self,
    ) -> typing.Optional[
        tuple[
            typing.Optional[GlyphNameDict],
            typing.Optional[GlyphNameDict],
            typing.Optional[GlyphNameList],
        ]
    ]:
        """\
        Returns a tuple (classes, markClasses, markSets) with information from
        the GlyphClassDef, MarkAttachClassDef, and MarkGlyphSetsTable subtables
        of this font’s GDEF table.
        Returns None if there’s no GDEF table.
        – classes: dict mapping glyph names to glyph classes.
        – markClasses: dict mapping glyph names to mark classes.
        – markSets: list of lists of glyph names.
        """
        ...
    def otScripts(self) -> set[str]:
        """\
        Returns the set of scripts for which this font provides OpenType features.
        """
        ...
    def otFeaturesForScript(self, script: str) -> tuple[OTFeatures, OTFeatures]:
        """\
        Returns a pair (gsub, gpos) with information about the features defined for the given script in this font.
        – gsub: a dictionary mapping OpenType feature tags to dictionaries mapping lookup IDs to a set of languages using the specific lookup.
        – gpos: a dictionary mapping OpenType feature tags to dictionaries mapping lookup IDs to a set of languages using the specific lookup.
        """
        ...
    _otLookupInProgress: object = ...
    def otLookup(
        self, tableName: str, lookupIndex: int
    ) -> typing.Union[GSUBLookup, GPOSLookup]:
        """\
        Returns a representation of the lookup with the given index from the named table.
        """
        ...
    def glyphNames(self) -> list[str]:
        """\
        Returns a list with the names of all the glyphs in this font.
        """
        ...
    def glyphName(self, index: int) -> str:
        """\
        Returns the name of the glyph with the given index in this font.
        """
        ...
    def glyphNamesForCharacters(self, characters: str) -> list[str]:
        """\
        Returns a list with the glyph names for the nominal glyphs for
        characters in the string provided.
        """
        ...
    def glyphForName(self, glyphName: str) -> Glyph:
        """\
        Returns the glyph with the given name.
        """
        ...
    def glyphForIndex(self, index: int) -> Glyph:
        """\
        Returns the glyph with the given glyph index.
        """
        ...
    def glyphForCharacter(self, char: str) -> Glyph:
        """\
        Returns the nominal glyph for the given Unicode character.
        """
        ...
    def indexForGlyphName(self, glyphName: str) -> int:
        """\
        Returns the glyph index for the given glyph name.
        """
        ...
    def codePointsForGlyphName(self, glyphName: str) -> list[int]:
        """\
        Returns a list of code points for which the given glyph is a cmap entry.
        """
        ...
    def glyphForReference(self, reference: str) -> Glyph:
        """\
        Interprets the given string as a glyph reference and returns the
        corresponding glyph.
        Supported glyph references are:
        – "/" + glyph name
        – "u" + code point as 4-6 hexadecimal characters
        – "gid" + glyph id
        """
        ...

class Glyph:
    """\
    A glyph that’s part of a font represented by a Font object.
    Keeps a reference to the font because looking up glyph metrics
    usually requires access to the font’s tables.
    """

    def __init__(self, name: str, ttName: str, font: Font) -> None: ...
    def __eq__(self, other: object) -> bool:
        """\
        Check whether this object and other represent the same glyph.
        """
        ...
    def __str__(self) -> str:
        """\
        Returns a string representing this glyph.
        """
        ...
    def name(self) -> str:
        """\
        Returns the name of this glyph.
        """
        ...
    def index(self) -> int:
        """\
        Returns the index of this glyph within its font.
        """
        ...
    def codePoints(self) -> list[int]:
        """\
        Returns the code points for which this glyph is a cmap entry.
        """
        ...
    def unitsPerEm(self) -> int:
        """\
        Returns the units per em of this glyph’s font.
        """
        ...
    def hasOutline(self) -> bool:
        """\
        Returns whether this glyph has an outline.
        """
        ...
    def svgCommands(self) -> str:
        """\
        Returns the outline of this glyph as an SVG path,
        or "" if the glyph has no outline.
        """
        ...
    def nsBezierPath(
        self,
    ) -> typing.Any:  # should really be AppKit.NSBezierPath.bezierPath, but that would require another level of stubs...
        """\
        Returns the outline of this glyph as an NSBezierPath object.
        Available on macOS only.
        """
        ...
    def boundingBox(self) -> typing.Optional[tuple[int, int, int, int]]:
        """\
        Returns the bounding box of this glyph,
        or None if the glyph has no outline.

        The bounding box is the smallest rectangle that fully
        encloses the glyph’s outline.
        """
        ...
    def advanceWidth(self) -> int:
        """\
        Returns the advance width of this glyph as given
        in the hmtx table.
        """
        ...
    def advanceHeight(self) -> int:
        """\
        Returns the advance height of this glyph as given
        in the vmtx table.
        """
        ...
    def top(self) -> int:
        """\
        Returns the sum of yMax and top side bearing of this glyph.
        """
        ...
    def glyphMetric(self, metric: str) -> int:  # does it really always return an int?
        """\
        Returns the requested glyph metric.
        Supported metrics are specified in the section
        “Expressions for glyph metrics” of the GlyphPlotter manual.
        """
        ...
    def anchors(self) -> tuple[AnchorSet, AnchorSet]:
        """\
        Returns a tuple of sets of anchor points defined for the glyph,
        one for points where the glyph acts as a base, one for points where
        the glyph acts as a mark. The elements of the sets are (x, y) pairs.
        """
        ...
