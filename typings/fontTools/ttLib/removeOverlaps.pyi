"""
This type stub file was generated by pyright.
"""

import pathops
from typing import Iterable, Mapping, Optional
from fontTools.ttLib import ttFont
from fontTools.ttLib.tables import _g_l_y_f, _h_m_t_x

""" Simplify TrueType glyphs by merging overlapping contours/components.

Requires https://github.com/fonttools/skia-pathops
"""
__all__ = ["removeOverlaps"]
class RemoveOverlapsError(Exception):
    ...


log = ...
_TTGlyphMapping = Mapping[str, ttFont._TTGlyph]
def skPathFromGlyph(glyphName: str, glyphSet: _TTGlyphMapping) -> pathops.Path:
    ...

def skPathFromGlyphComponent(component: _g_l_y_f.GlyphComponent, glyphSet: _TTGlyphMapping):
    ...

def componentsOverlap(glyph: _g_l_y_f.Glyph, glyphSet: _TTGlyphMapping) -> bool:
    ...

def ttfGlyphFromSkPath(path: pathops.Path) -> _g_l_y_f.Glyph:
    ...

def removeTTGlyphOverlaps(glyphName: str, glyphSet: _TTGlyphMapping, glyfTable: _g_l_y_f.table__g_l_y_f, hmtxTable: _h_m_t_x.table__h_m_t_x, removeHinting: bool = ...) -> bool:
    ...

def removeOverlaps(font: ttFont.TTFont, glyphNames: Optional[Iterable[str]] = ..., removeHinting: bool = ..., ignoreErrors=...) -> None:
    """Simplify glyphs in TTFont by merging overlapping contours.

    Overlapping components are first decomposed to simple contours, then merged.

    Currently this only works with TrueType fonts with 'glyf' table.
    Raises NotImplementedError if 'glyf' table is absent.

    Note that removing overlaps invalidates the hinting. By default we drop hinting
    from all glyphs whether or not overlaps are removed from a given one, as it would
    look weird if only some glyphs are left (un)hinted.

    Args:
        font: input TTFont object, modified in place.
        glyphNames: optional iterable of glyph names (str) to remove overlaps from.
            By default, all glyphs in the font are processed.
        removeHinting (bool): set to False to keep hinting for unmodified glyphs.
        ignoreErrors (bool): set to True to ignore errors while removing overlaps,
            thus keeping the tricky glyphs unchanged (fonttools/fonttools#2363).
    """
    ...

def main(args=...): # -> None:
    ...

if __name__ == "__main__":
    ...
