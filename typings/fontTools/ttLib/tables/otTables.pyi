"""
This type stub file was generated by pyright.
"""

from enum import IntEnum
from .otBase import BaseTable, FormatSwitchingBaseTable, getFormatSwitchingBaseTableClass

"""fontTools.ttLib.tables.otTables -- A collection of classes representing the various
OpenType subtables.

Most are constructed upon import from data in otData.py, all are populated with
converter objects from otConverters.py.
"""
log = ...
class AATStateTable:
	def __init__(self) -> None:
		...
	


class AATState:
	def __init__(self) -> None:
		...
	


class AATAction:
	_FLAGS = ...
	@staticmethod
	def compileActions(font, states): # -> tuple[None, None]:
		...
	


class RearrangementMorphAction(AATAction):
	staticSize = ...
	actionHeaderSize = ...
	_FLAGS = ...
	_VERBS = ...
	def __init__(self) -> None:
		...
	
	def compile(self, writer, font, actionIndex): # -> None:
		...
	
	def decompile(self, reader, font, actionReader): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs, name): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	


class ContextualMorphAction(AATAction):
	staticSize = ...
	actionHeaderSize = ...
	_FLAGS = ...
	def __init__(self) -> None:
		...
	
	def compile(self, writer, font, actionIndex): # -> None:
		...
	
	def decompile(self, reader, font, actionReader): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs, name): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	


class LigAction:
	def __init__(self) -> None:
		...
	


class LigatureMorphAction(AATAction):
	staticSize = ...
	actionHeaderSize = ...
	_FLAGS = ...
	def __init__(self) -> None:
		...
	
	def compile(self, writer, font, actionIndex): # -> None:
		...
	
	def decompile(self, reader, font, actionReader): # -> None:
		...
	
	@staticmethod
	def compileActions(font, states):
		...
	
	def compileLigActions(self): # -> bytes:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	
	def toXML(self, xmlWriter, font, attrs, name): # -> None:
		...
	


class InsertionMorphAction(AATAction):
	staticSize = ...
	actionHeaderSize = ...
	_FLAGS = ...
	def __init__(self) -> None:
		...
	
	def compile(self, writer, font, actionIndex):
		...
	
	def decompile(self, reader, font, actionReader): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs, name): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	
	@staticmethod
	def compileActions(font, states):
		...
	


class FeatureParams(BaseTable):
	def compile(self, writer, font): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs=..., name=...): # -> None:
		...
	


class FeatureParamsSize(FeatureParams):
	...


class FeatureParamsStylisticSet(FeatureParams):
	...


class FeatureParamsCharacterVariants(FeatureParams):
	...


class Coverage(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font):
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class DeltaSetIndexMap(getFormatSwitchingBaseTableClass("uint8")):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	@staticmethod
	def getEntryFormat(mapping): # -> int:
		...
	
	def preWrite(self, font): # -> dict[str, Any]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class VarIdxMap(BaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font): # -> dict[str, list[Any | Unknown]]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class VarRegionList(BaseTable):
	def preWrite(self, font): # -> dict[str, Any | CountReference]:
		...
	


class SingleSubst(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font): # -> dict[Unknown, Unknown]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class MultipleSubst(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font): # -> dict[str, Coverage | list[Unknown]]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	
	@staticmethod
	def makeSequence_(g):
		...
	


class ClassDef(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font):
		...
	
	def preWrite(self, font): # -> dict[str, Unknown] | dict[str, list[Unknown]]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class AlternateSubst(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font): # -> dict[str, Coverage | list[Unknown]]:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class LigatureSubst(FormatSwitchingBaseTable):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font): # -> None:
		...
	
	def preWrite(self, font):
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class COLR(BaseTable):
	def decompile(self, reader, font): # -> None:
		...
	
	def preWrite(self, font): # -> dict[str, Any | CountReference]:
		...
	


class LookupList(BaseTable):
	@property
	def table(self): # -> Literal['GSUB', 'GPOS']:
		...
	
	def toXML2(self, xmlWriter, font):
		...
	


class BaseGlyphRecordArray(BaseTable):
	def preWrite(self, font): # -> dict[str, Any]:
		...
	


class BaseGlyphList(BaseTable):
	def preWrite(self, font): # -> dict[str, Any]:
		...
	


class ClipBox(getFormatSwitchingBaseTableClass("uint8")):
	def as_tuple(self): # -> tuple[Any, ...]:
		...
	
	def __repr__(self): # -> str:
		...
	


class ClipList(getFormatSwitchingBaseTableClass("uint8")):
	def populateDefaults(self, propagator=...): # -> None:
		...
	
	def postRead(self, rawTable, font):
		...
	
	def groups(self): # -> dict[frozenset[Unknown], Unknown]:
		...
	
	def preWrite(self, font):
		...
	
	def toXML(self, xmlWriter, font, attrs=..., name=...): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font):
		...
	


class ExtendMode(IntEnum):
	PAD = ...
	REPEAT = ...
	REFLECT = ...


class CompositeMode(IntEnum):
	CLEAR = ...
	SRC = ...
	DEST = ...
	SRC_OVER = ...
	DEST_OVER = ...
	SRC_IN = ...
	DEST_IN = ...
	SRC_OUT = ...
	DEST_OUT = ...
	SRC_ATOP = ...
	DEST_ATOP = ...
	XOR = ...
	PLUS = ...
	SCREEN = ...
	OVERLAY = ...
	DARKEN = ...
	LIGHTEN = ...
	COLOR_DODGE = ...
	COLOR_BURN = ...
	HARD_LIGHT = ...
	SOFT_LIGHT = ...
	DIFFERENCE = ...
	EXCLUSION = ...
	MULTIPLY = ...
	HSL_HUE = ...
	HSL_SATURATION = ...
	HSL_COLOR = ...
	HSL_LUMINOSITY = ...


class PaintFormat(IntEnum):
	PaintColrLayers = ...
	PaintSolid = ...
	PaintVarSolid = ...
	PaintLinearGradient = ...
	PaintVarLinearGradient = ...
	PaintRadialGradient = ...
	PaintVarRadialGradient = ...
	PaintSweepGradient = ...
	PaintVarSweepGradient = ...
	PaintGlyph = ...
	PaintColrGlyph = ...
	PaintTransform = ...
	PaintVarTransform = ...
	PaintTranslate = ...
	PaintVarTranslate = ...
	PaintScale = ...
	PaintVarScale = ...
	PaintScaleAroundCenter = ...
	PaintVarScaleAroundCenter = ...
	PaintScaleUniform = ...
	PaintVarScaleUniform = ...
	PaintScaleUniformAroundCenter = ...
	PaintVarScaleUniformAroundCenter = ...
	PaintRotate = ...
	PaintVarRotate = ...
	PaintRotateAroundCenter = ...
	PaintVarRotateAroundCenter = ...
	PaintSkew = ...
	PaintVarSkew = ...
	PaintSkewAroundCenter = ...
	PaintVarSkewAroundCenter = ...
	PaintComposite = ...


class Paint(getFormatSwitchingBaseTableClass("uint8")):
	def getFormatName(self): # -> str:
		...
	
	def toXML(self, xmlWriter, font, attrs=..., name=...): # -> None:
		...
	
	def getChildren(self, colr):
		...
	
	def traverse(self, colr: COLR, callback): # -> None:
		"""Depth-first traversal of graph rooted at self, callback on each node."""
		...
	


_equivalents = ...
def fixLookupOverFlows(ttf, overflowRecord):
	""" Either the offset from the LookupList to a lookup overflowed, or
	an offset from a lookup to a subtable overflowed.
	The table layout is:
	GPSO/GUSB
		Script List
		Feature List
		LookUpList
			Lookup[0] and contents
				SubTable offset list
					SubTable[0] and contents
					...
					SubTable[n] and contents
			...
			Lookup[n] and contents
				SubTable offset list
					SubTable[0] and contents
					...
					SubTable[n] and contents
	If the offset to a lookup overflowed (SubTableIndex is None)
		we must promote the *previous*	lookup to an Extension type.
	If the offset from a lookup to subtable overflowed, then we must promote it
		to an Extension Lookup type.
	"""
	...

def splitMultipleSubst(oldSubTable, newSubTable, overflowRecord): # -> Literal[1]:
	...

def splitAlternateSubst(oldSubTable, newSubTable, overflowRecord): # -> Literal[1]:
	...

def splitLigatureSubst(oldSubTable, newSubTable, overflowRecord): # -> Literal[1]:
	...

def splitPairPos(oldSubTable, newSubTable, overflowRecord):
	...

def splitMarkBasePos(oldSubTable, newSubTable, overflowRecord): # -> bool:
	...

splitTable = ...
def fixSubTableOverFlows(ttf, overflowRecord): # -> bool | Literal[1]:
	"""
	An offset has overflowed within a sub-table. We need to divide this subtable into smaller parts.
	"""
	...

