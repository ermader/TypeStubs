"""
This type stub file was generated by pyright.
"""

from fontTools.ttLib.tables import DefaultTable

log = ...
panoseFormat = ...
class Panose:
	def toXML(self, writer, ttFont): # -> None:
		...
	
	def fromXML(self, name, attrs, content, ttFont): # -> None:
		...
	


OS2_format_0 = ...
OS2_format_1_addition = ...
OS2_format_2_addition = ...
OS2_format_5_addition = ...
bigendian = ...
OS2_format_1 = ...
OS2_format_2 = ...
OS2_format_5 = ...
OS2_format_1_addition = ...
OS2_format_2_addition = ...
OS2_format_5_addition = ...
class table_O_S_2f_2(DefaultTable.DefaultTable):
	"""the OS/2 table"""
	dependencies = ...
	def decompile(self, data, ttFont): # -> None:
		...
	
	def compile(self, ttFont): # -> bytes:
		...
	
	def toXML(self, writer, ttFont):
		...
	
	def fromXML(self, name, attrs, content, ttFont): # -> None:
		...
	
	def updateFirstAndLastCharIndex(self, ttFont): # -> None:
		...
	
	@property
	def usMaxContex(self):
		...
	
	@usMaxContex.setter
	def usMaxContex(self, value): # -> None:
		...
	
	@property
	def fsFirstCharIndex(self): # -> int:
		...
	
	@fsFirstCharIndex.setter
	def fsFirstCharIndex(self, value): # -> None:
		...
	
	@property
	def fsLastCharIndex(self): # -> int:
		...
	
	@fsLastCharIndex.setter
	def fsLastCharIndex(self, value): # -> None:
		...
	
	def getUnicodeRanges(self): # -> set[Unknown]:
		""" Return the set of 'ulUnicodeRange*' bits currently enabled. """
		...
	
	def setUnicodeRanges(self, bits): # -> None:
		""" Set the 'ulUnicodeRange*' fields to the specified 'bits'. """
		...
	
	def recalcUnicodeRanges(self, ttFont, pruneOnly=...): # -> set[Unknown] | set[int]:
		""" Intersect the codepoints in the font's Unicode cmap subtables with
		the Unicode block ranges defined in the OpenType specification (v1.7),
		and set the respective 'ulUnicodeRange*' bits if there is at least ONE
		intersection.
		If 'pruneOnly' is True, only clear unused bits with NO intersection.
		"""
		...
	


OS2_UNICODE_RANGES = ...
_unicodeStarts = ...
_unicodeValues = ...
def intersectUnicodeRanges(unicodes, inverse=...): # -> set[int] | set[Unknown]:
	""" Intersect a sequence of (int) Unicode codepoints with the Unicode block
	ranges defined in the OpenType specification v1.7, and return the set of
	'ulUnicodeRanges' bits for which there is at least ONE intersection.
	If 'inverse' is True, return the the bits for which there is NO intersection.

	>>> intersectUnicodeRanges([0x0410]) == {9}
	True
	>>> intersectUnicodeRanges([0x0410, 0x1F000]) == {9, 57, 122}
	True
	>>> intersectUnicodeRanges([0x0410, 0x1F000], inverse=True) == (
	...     set(range(len(OS2_UNICODE_RANGES))) - {9, 57, 122})
	True
	"""
	...

if __name__ == "__main__":
	...
