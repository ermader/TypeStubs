"""
This type stub file was generated by pyright.
"""

from .DefaultTable import DefaultTable

log = ...
class OverflowErrorRecord:
	def __init__(self, overflowTuple) -> None:
		...
	
	def __repr__(self): # -> str:
		...
	


class OTLOffsetOverflowError(Exception):
	def __init__(self, overflowErrorRecord) -> None:
		...
	
	def __str__(self) -> str:
		...
	


class BaseTTXConverter(DefaultTable):
	"""Generic base class for TTX table converters. It functions as an
	adapter between the TTX (ttLib actually) table model and the model
	we use for OpenType tables, which is necessarily subtly different.
	"""
	def decompile(self, data, font): # -> None:
		"""Create an object from the binary data. Called automatically on access."""
		...
	
	def compile(self, font):
		"""Compiles the table into binary. Called automatically on save."""
		...
	
	def toXML(self, writer, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	


class OTTableReader:
	"""Helper class to retrieve data from an OpenType table."""
	__slots__ = ...
	def __init__(self, data, localState=..., offset=..., tableTag=...) -> None:
		...
	
	def advance(self, count): # -> None:
		...
	
	def seek(self, pos): # -> None:
		...
	
	def copy(self): # -> Self@OTTableReader:
		...
	
	def getSubReader(self, offset): # -> Self@OTTableReader:
		...
	
	def readValue(self, typecode, staticSize): # -> Any:
		...
	
	def readArray(self, typecode, staticSize, count): # -> list[int]:
		...
	
	def readInt8(self): # -> Any:
		...
	
	def readInt8Array(self, count): # -> list[int]:
		...
	
	def readShort(self): # -> Any:
		...
	
	def readShortArray(self, count): # -> list[int]:
		...
	
	def readLong(self): # -> Any:
		...
	
	def readLongArray(self, count): # -> list[int]:
		...
	
	def readUInt8(self): # -> Any:
		...
	
	def readUInt8Array(self, count): # -> list[int]:
		...
	
	def readUShort(self): # -> Any:
		...
	
	def readUShortArray(self, count): # -> list[int]:
		...
	
	def readULong(self): # -> Any:
		...
	
	def readULongArray(self, count): # -> list[int]:
		...
	
	def readUInt24(self): # -> Any:
		...
	
	def readUInt24Array(self, count): # -> list[Any]:
		...
	
	def readTag(self): # -> Tag:
		...
	
	def readData(self, count):
		...
	
	def __setitem__(self, name, value): # -> None:
		...
	
	def __getitem__(self, name): # -> dict[Unknown, Unknown]:
		...
	
	def __contains__(self, name): # -> bool | dict[Unknown, Unknown]:
		...
	


class OTTableWriter:
	"""Helper class to gather and assemble data for OpenType tables."""
	def __init__(self, localState=..., tableTag=..., offsetSize=...) -> None:
		...
	
	@property
	def longOffset(self): # -> bool:
		...
	
	@longOffset.setter
	def longOffset(self, value): # -> None:
		...
	
	def __setitem__(self, name, value): # -> None:
		...
	
	def __getitem__(self, name):
		...
	
	def __delitem__(self, name): # -> None:
		...
	
	def getDataLength(self): # -> int:
		"""Return the length of this table in bytes, without subtables."""
		...
	
	def getData(self): # -> bytes:
		"""Assemble the data for this writer/table, without subtables."""
		...
	
	def __hash__(self) -> int:
		...
	
	def __ne__(self, other) -> bool:
		...
	
	def __eq__(self, other) -> bool:
		...
	
	def getAllData(self): # -> bytes:
		"""Assemble all data, including all subtables."""
		...
	
	def getSubWriter(self, offsetSize=...): # -> Self@OTTableWriter:
		...
	
	def writeValue(self, typecode, value): # -> None:
		...
	
	def writeArray(self, typecode, values): # -> None:
		...
	
	def writeInt8(self, value): # -> None:
		...
	
	def writeInt8Array(self, values): # -> None:
		...
	
	def writeShort(self, value): # -> None:
		...
	
	def writeShortArray(self, values): # -> None:
		...
	
	def writeLong(self, value): # -> None:
		...
	
	def writeLongArray(self, values): # -> None:
		...
	
	def writeUInt8(self, value): # -> None:
		...
	
	def writeUInt8Array(self, values): # -> None:
		...
	
	def writeUShort(self, value): # -> None:
		...
	
	def writeUShortArray(self, values): # -> None:
		...
	
	def writeULong(self, value): # -> None:
		...
	
	def writeULongArray(self, values): # -> None:
		...
	
	def writeUInt24(self, value): # -> None:
		...
	
	def writeUInt24Array(self, values): # -> None:
		...
	
	def writeTag(self, tag): # -> None:
		...
	
	def writeSubTable(self, subWriter): # -> None:
		...
	
	def writeCountReference(self, table, name, size=..., value=...): # -> CountReference:
		...
	
	def writeStruct(self, format, values): # -> None:
		...
	
	def writeData(self, data): # -> None:
		...
	
	def getOverflowErrorRecord(self, item):
		...
	


class CountReference:
	"""A reference to a Count value, not a count of references."""
	def __init__(self, table, name, size=..., value=...) -> None:
		...
	
	def setValue(self, value): # -> None:
		...
	
	def getValue(self):
		...
	
	def getCountData(self): # -> bytes:
		...
	


def packUInt8(value): # -> bytes:
	...

def packUShort(value): # -> bytes:
	...

def packULong(value): # -> bytes:
	...

def packUInt24(value): # -> bytes:
	...

class BaseTable:
	"""Generic base class for all OpenType (sub)tables."""
	def __getattr__(self, attr): # -> Any:
		...
	
	def ensureDecompiled(self): # -> None:
		...
	
	@classmethod
	def getRecordSize(cls, reader): # -> _NotImplementedType | Literal[0]:
		...
	
	def getConverters(self):
		...
	
	def getConverterByName(self, name): # -> Any:
		...
	
	def populateDefaults(self, propagator=...):
		...
	
	def decompile(self, reader, font):
		...
	
	def compile(self, writer, font):
		...
	
	def readFormat(self, reader): # -> None:
		...
	
	def writeFormat(self, writer): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs=..., name=...): # -> None:
		...
	
	def toXML2(self, xmlWriter, font): # -> None:
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	
	def __ne__(self, other) -> bool:
		...
	
	def __eq__(self, other) -> bool:
		...
	


class FormatSwitchingBaseTable(BaseTable):
	"""Minor specialization of BaseTable, for tables that have multiple
	formats, eg. CoverageFormat1 vs. CoverageFormat2."""
	@classmethod
	def getRecordSize(cls, reader): # -> _NotImplementedType:
		...
	
	def getConverters(self): # -> Any:
		...
	
	def getConverterByName(self, name): # -> Any:
		...
	
	def readFormat(self, reader): # -> None:
		...
	
	def writeFormat(self, writer): # -> None:
		...
	
	def toXML(self, xmlWriter, font, attrs=..., name=...): # -> None:
		...
	


class UInt8FormatSwitchingBaseTable(FormatSwitchingBaseTable):
	def readFormat(self, reader): # -> None:
		...
	
	def writeFormat(self, writer): # -> None:
		...
	


formatSwitchingBaseTables = ...
def getFormatSwitchingBaseTableClass(formatType): # -> Type[FormatSwitchingBaseTable] | Type[UInt8FormatSwitchingBaseTable]:
	...

valueRecordFormat = ...
valueRecordFormatDict = ...
class ValueRecordFactory:
	"""Given a format code, this object convert ValueRecords."""
	def __init__(self, valueFormat) -> None:
		...
	
	def __len__(self): # -> int:
		...
	
	def readValueRecord(self, reader, font):
		...
	
	def writeValueRecord(self, writer, font, valueRecord): # -> None:
		...
	


class ValueRecord:
	def __init__(self, valueFormat=..., src=...) -> None:
		...
	
	def getFormat(self): # -> Literal[0]:
		...
	
	def getEffectiveFormat(self): # -> Literal[0]:
		...
	
	def toXML(self, xmlWriter, font, valueName, attrs=...):
		...
	
	def fromXML(self, name, attrs, content, font): # -> None:
		...
	
	def __ne__(self, other) -> bool:
		...
	
	def __eq__(self, other) -> bool:
		...
	


