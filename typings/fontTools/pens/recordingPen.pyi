"""
This type stub file was generated by pyright.
"""

from fontTools.pens.basePen import AbstractPen, DecomposingPen
from fontTools.pens.pointPen import AbstractPointPen

"""Pen recording operations that can be accessed or replayed."""
__all__ = ["replayRecording", "RecordingPen", "DecomposingRecordingPen", "RecordingPointPen"]
def replayRecording(recording, pen): # -> None:
	"""Replay a recording, as produced by RecordingPen or DecomposingRecordingPen,
	to a pen.

	Note that recording does not have to be produced by those pens.
	It can be any iterable of tuples of method name and tuple-of-arguments.
	Likewise, pen can be any objects receiving those method calls.
	"""
	...

class RecordingPen(AbstractPen):
	"""Pen recording operations that can be accessed or replayed.

	The recording can be accessed as pen.value; or replayed using
	pen.replay(otherPen).

	:Example:

		from fontTools.ttLib import TTFont
		from fontTools.pens.recordingPen import RecordingPen

		glyph_name = 'dollar'
		font_path = 'MyFont.otf'

		font = TTFont(font_path)
		glyphset = font.getGlyphSet()
		glyph = glyphset[glyph_name]

		pen = RecordingPen()
		glyph.draw(pen)
		print(pen.value)
	"""
	def __init__(self) -> None:
		...
	
	def moveTo(self, p0): # -> None:
		...
	
	def lineTo(self, p1): # -> None:
		...
	
	def qCurveTo(self, *points): # -> None:
		...
	
	def curveTo(self, *points): # -> None:
		...
	
	def closePath(self): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addComponent(self, glyphName, transformation): # -> None:
		...
	
	def replay(self, pen): # -> None:
		...
	


class DecomposingRecordingPen(DecomposingPen, RecordingPen):
	""" Same as RecordingPen, except that it doesn't keep components
	as references, but draws them decomposed as regular contours.

	The constructor takes a single 'glyphSet' positional argument,
	a dictionary of glyph objects (i.e. with a 'draw' method) keyed
	by thir name::

		>>> class SimpleGlyph(object):
		...     def draw(self, pen):
		...         pen.moveTo((0, 0))
		...         pen.curveTo((1, 1), (2, 2), (3, 3))
		...         pen.closePath()
		>>> class CompositeGlyph(object):
		...     def draw(self, pen):
		...         pen.addComponent('a', (1, 0, 0, 1, -1, 1))
		>>> glyphSet = {'a': SimpleGlyph(), 'b': CompositeGlyph()}
		>>> for name, glyph in sorted(glyphSet.items()):
		...     pen = DecomposingRecordingPen(glyphSet)
		...     glyph.draw(pen)
		...     print("{}: {}".format(name, pen.value))
		a: [('moveTo', ((0, 0),)), ('curveTo', ((1, 1), (2, 2), (3, 3))), ('closePath', ())]
		b: [('moveTo', ((-1, 1),)), ('curveTo', ((0, 2), (1, 3), (2, 4))), ('closePath', ())]
	"""
	skipMissingComponents = ...


class RecordingPointPen(AbstractPointPen):
	"""PointPen recording operations that can be accessed or replayed.

	The recording can be accessed as pen.value; or replayed using
	pointPen.replay(otherPointPen).

	:Example:

		from defcon import Font
		from fontTools.pens.recordingPen import RecordingPointPen

		glyph_name = 'a'
		font_path = 'MyFont.ufo'

		font = Font(font_path)
		glyph = font[glyph_name]

		pen = RecordingPointPen()
		glyph.drawPoints(pen)
		print(pen.value)

		new_glyph = font.newGlyph('b')
		pen.replay(new_glyph.getPointPen())
	"""
	def __init__(self) -> None:
		...
	
	def beginPath(self, identifier=..., **kwargs): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addPoint(self, pt, segmentType=..., smooth=..., name=..., identifier=..., **kwargs): # -> None:
		...
	
	def addComponent(self, baseGlyphName, transformation, identifier=..., **kwargs): # -> None:
		...
	
	def replay(self, pointPen): # -> None:
		...
	


if __name__ == "__main__":
	pen = ...
