"""
This type stub file was generated by pyright.
"""

from typing import Any, Optional, Tuple
from fontTools.pens.basePen import AbstractPen

"""
=========
PointPens
=========

Where **SegmentPens** have an intuitive approach to drawing
(if you're familiar with postscript anyway), the **PointPen**
is geared towards accessing all the data in the contours of
the glyph. A PointPen has a very simple interface, it just
steps through all the points in a call from glyph.drawPoints().
This allows the caller to provide more data for each point.
For instance, whether or not a point is smooth, and its name.
"""
__all__ = ["AbstractPointPen", "BasePointToSegmentPen", "PointToSegmentPen", "SegmentToPointPen", "GuessSmoothPointPen", "ReverseContourPointPen"]
class AbstractPointPen:
	"""Baseclass for all PointPens."""
	def beginPath(self, identifier: Optional[str] = ..., **kwargs: Any) -> None:
		"""Start a new sub path."""
		...
	
	def endPath(self) -> None:
		"""End the current sub path."""
		...
	
	def addPoint(self, pt: Tuple[float, float], segmentType: Optional[str] = ..., smooth: bool = ..., name: Optional[str] = ..., identifier: Optional[str] = ..., **kwargs: Any) -> None:
		"""Add a point to the current sub path."""
		...
	
	def addComponent(self, baseGlyphName: str, transformation: Tuple[float, float, float, float, float, float], identifier: Optional[str] = ..., **kwargs: Any) -> None:
		"""Add a sub glyph."""
		...
	


class BasePointToSegmentPen(AbstractPointPen):
	"""
	Base class for retrieving the outline in a segment-oriented
	way. The PointPen protocol is simple yet also a little tricky,
	so when you need an outline presented as segments but you have
	as points, do use this base implementation as it properly takes
	care of all the edge cases.
	"""
	def __init__(self) -> None:
		...
	
	def beginPath(self, identifier=..., **kwargs): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addPoint(self, pt, segmentType=..., smooth=..., name=..., identifier=..., **kwargs): # -> None:
		...
	


class PointToSegmentPen(BasePointToSegmentPen):
	"""
	Adapter class that converts the PointPen protocol to the
	(Segment)Pen protocol.

	NOTE: The segment pen does not support and will drop point names, identifiers
	and kwargs.
	"""
	def __init__(self, segmentPen, outputImpliedClosingLine=...) -> None:
		...
	
	def addComponent(self, glyphName, transform, identifier=..., **kwargs): # -> None:
		...
	


class SegmentToPointPen(AbstractPen):
	"""
	Adapter class that converts the (Segment)Pen protocol to the
	PointPen protocol.
	"""
	def __init__(self, pointPen, guessSmooth=...) -> None:
		...
	
	def moveTo(self, pt): # -> None:
		...
	
	def lineTo(self, pt): # -> None:
		...
	
	def curveTo(self, *pts): # -> None:
		...
	
	def qCurveTo(self, *pts): # -> None:
		...
	
	def closePath(self): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addComponent(self, glyphName, transform): # -> None:
		...
	


class GuessSmoothPointPen(AbstractPointPen):
	"""
	Filtering PointPen that tries to determine whether an on-curve point
	should be "smooth", ie. that it's a "tangent" point or a "curve" point.
	"""
	def __init__(self, outPen, error=...) -> None:
		...
	
	def beginPath(self, identifier=..., **kwargs): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addPoint(self, pt, segmentType=..., smooth=..., name=..., identifier=..., **kwargs): # -> None:
		...
	
	def addComponent(self, glyphName, transformation, identifier=..., **kwargs): # -> None:
		...
	


class ReverseContourPointPen(AbstractPointPen):
	"""
	This is a PointPen that passes outline data to another PointPen, but
	reversing the winding direction of all contours. Components are simply
	passed through unchanged.

	Closed contours are reversed in such a way that the first point remains
	the first point.
	"""
	def __init__(self, outputPointPen) -> None:
		...
	
	def beginPath(self, identifier=..., **kwargs): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addPoint(self, pt, segmentType=..., smooth=..., name=..., identifier=..., **kwargs): # -> None:
		...
	
	def addComponent(self, glyphName, transform, identifier=..., **kwargs): # -> None:
		...
	


