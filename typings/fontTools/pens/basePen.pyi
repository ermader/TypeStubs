"""
This type stub file was generated by pyright.
"""

from typing import Tuple
from fontTools.misc.loggingTools import LogMixin

"""fontTools.pens.basePen.py -- Tools and base classes to build pen objects.

The Pen Protocol

A Pen is a kind of object that standardizes the way how to "draw" outlines:
it is a middle man between an outline and a drawing. In other words:
it is an abstraction for drawing outlines, making sure that outline objects
don't need to know the details about how and where they're being drawn, and
that drawings don't need to know the details of how outlines are stored.

The most basic pattern is this::

	outline.draw(pen)  # 'outline' draws itself onto 'pen'

Pens can be used to render outlines to the screen, but also to construct
new outlines. Eg. an outline object can be both a drawable object (it has a
draw() method) as well as a pen itself: you *build* an outline using pen
methods.

The AbstractPen class defines the Pen protocol. It implements almost
nothing (only no-op closePath() and endPath() methods), but is useful
for documentation purposes. Subclassing it basically tells the reader:
"this class implements the Pen protocol.". An examples of an AbstractPen
subclass is :py:class:`fontTools.pens.transformPen.TransformPen`.

The BasePen class is a base implementation useful for pens that actually
draw (for example a pen renders outlines using a native graphics engine).
BasePen contains a lot of base functionality, making it very easy to build
a pen that fully conforms to the pen protocol. Note that if you subclass
BasePen, you *don't* override moveTo(), lineTo(), etc., but _moveTo(),
_lineTo(), etc. See the BasePen doc string for details. Examples of
BasePen subclasses are fontTools.pens.boundsPen.BoundsPen and
fontTools.pens.cocoaPen.CocoaPen.

Coordinates are usually expressed as (x, y) tuples, but generally any
sequence of length 2 will do.
"""
__all__ = ["AbstractPen", "NullPen", "BasePen", "PenError", "decomposeSuperBezierSegment", "decomposeQuadraticSegment"]
class PenError(Exception):
	"""Represents an error during penning."""
	...


class AbstractPen:
	def moveTo(self, pt: Tuple[float, float]) -> None:
		"""Begin a new sub path, set the current point to 'pt'. You must
		end each sub path with a call to pen.closePath() or pen.endPath().
		"""
		...
	
	def lineTo(self, pt: Tuple[float, float]) -> None:
		"""Draw a straight line from the current point to 'pt'."""
		...
	
	def curveTo(self, *points: Tuple[float, float]) -> None:
		"""Draw a cubic bezier with an arbitrary number of control points.

		The last point specified is on-curve, all others are off-curve
		(control) points. If the number of control points is > 2, the
		segment is split into multiple bezier segments. This works
		like this:

		Let n be the number of control points (which is the number of
		arguments to this call minus 1). If n==2, a plain vanilla cubic
		bezier is drawn. If n==1, we fall back to a quadratic segment and
		if n==0 we draw a straight line. It gets interesting when n>2:
		n-1 PostScript-style cubic segments will be drawn as if it were
		one curve. See decomposeSuperBezierSegment().

		The conversion algorithm used for n>2 is inspired by NURB
		splines, and is conceptually equivalent to the TrueType "implied
		points" principle. See also decomposeQuadraticSegment().
		"""
		...
	
	def qCurveTo(self, *points: Tuple[float, float]) -> None:
		"""Draw a whole string of quadratic curve segments.

		The last point specified is on-curve, all others are off-curve
		points.

		This method implements TrueType-style curves, breaking up curves
		using 'implied points': between each two consequtive off-curve points,
		there is one implied point exactly in the middle between them. See
		also decomposeQuadraticSegment().

		The last argument (normally the on-curve point) may be None.
		This is to support contours that have NO on-curve points (a rarely
		seen feature of TrueType outlines).
		"""
		...
	
	def closePath(self) -> None:
		"""Close the current sub path. You must call either pen.closePath()
		or pen.endPath() after each sub path.
		"""
		...
	
	def endPath(self) -> None:
		"""End the current sub path, but don't close it. You must call
		either pen.closePath() or pen.endPath() after each sub path.
		"""
		...
	
	def addComponent(self, glyphName: str, transformation: Tuple[float, float, float, float, float, float]) -> None:
		"""Add a sub glyph. The 'transformation' argument must be a 6-tuple
		containing an affine transformation, or a Transform object from the
		fontTools.misc.transform module. More precisely: it should be a
		sequence containing 6 numbers.
		"""
		...
	


class NullPen(AbstractPen):
	"""A pen that does nothing.
	"""
	def moveTo(self, pt): # -> None:
		...
	
	def lineTo(self, pt): # -> None:
		...
	
	def curveTo(self, *points): # -> None:
		...
	
	def qCurveTo(self, *points): # -> None:
		...
	
	def closePath(self): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def addComponent(self, glyphName, transformation): # -> None:
		...
	


class LoggingPen(LogMixin, AbstractPen):
	"""A pen with a ``log`` property (see fontTools.misc.loggingTools.LogMixin)
	"""
	...


class MissingComponentError(KeyError):
	"""Indicates a component pointing to a non-existent glyph in the glyphset."""
	...


class DecomposingPen(LoggingPen):
	""" Implements a 'addComponent' method that decomposes components
	(i.e. draws them onto self as simple contours).
	It can also be used as a mixin class (e.g. see ContourRecordingPen).

	You must override moveTo, lineTo, curveTo and qCurveTo. You may
	additionally override closePath, endPath and addComponent.

	By default a warning message is logged when a base glyph is missing;
	set the class variable ``skipMissingComponents`` to False if you want
	to raise a :class:`MissingComponentError` exception.
	"""
	skipMissingComponents = ...
	def __init__(self, glyphSet) -> None:
		""" Takes a single 'glyphSet' argument (dict), in which the glyphs
		that are referenced as components are looked up by their name.
		"""
		...
	
	def addComponent(self, glyphName, transformation): # -> None:
		""" Transform the points of the base glyph and draw it onto self.
		"""
		...
	


class BasePen(DecomposingPen):
	"""Base class for drawing pens. You must override _moveTo, _lineTo and
	_curveToOne. You may additionally override _closePath, _endPath,
	addComponent and/or _qCurveToOne. You should not override any other
	methods.
	"""
	def __init__(self, glyphSet=...) -> None:
		...
	
	def closePath(self): # -> None:
		...
	
	def endPath(self): # -> None:
		...
	
	def moveTo(self, pt): # -> None:
		...
	
	def lineTo(self, pt): # -> None:
		...
	
	def curveTo(self, *points): # -> None:
		...
	
	def qCurveTo(self, *points): # -> None:
		...
	


def decomposeSuperBezierSegment(points): # -> list[Unknown]:
	"""Split the SuperBezier described by 'points' into a list of regular
	bezier segments. The 'points' argument must be a sequence with length
	3 or greater, containing (x, y) coordinates. The last point is the
	destination on-curve point, the rest of the points are off-curve points.
	The start point should not be supplied.

	This function returns a list of (pt1, pt2, pt3) tuples, which each
	specify a regular curveto-style bezier segment.
	"""
	...

def decomposeQuadraticSegment(points): # -> list[Unknown]:
	"""Split the quadratic curve segment described by 'points' into a list
	of "atomic" quadratic segments. The 'points' argument must be a sequence
	with length 2 or greater, containing (x, y) coordinates. The last point
	is the destination on-curve point, the rest of the points are off-curve
	points. The start point should not be supplied.

	This function returns a list of (pt1, pt2) tuples, which each specify a
	plain quadratic bezier segment.
	"""
	...

class _TestPen(BasePen):
	"""Test class that prints PostScript to stdout."""
	...


if __name__ == "__main__":
	pen = ...
	pen = ...
