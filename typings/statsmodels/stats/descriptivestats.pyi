"""
This type stub file was generated by pyright.
"""

import numpy as np
import pandas as pd
from statsmodels.compat.pandas import Appender
from typing import Sequence, Union
from statsmodels.iolib.table import SimpleTable
from statsmodels.tools.decorators import cache_readonly

DEPRECATION_MSG = ...
PERCENTILES = ...
QUANTILES = np.array(PERCENTILES) / 100
def pd_ptp(df):
    ...

def pd_percentiles(df):
    ...

PANDAS = ...
def nancount(x, axis=...): # -> Any:
    ...

def nanptp(arr, axis=...): # -> Any:
    ...

def nanuss(arr, axis=...): # -> Any:
    ...

def nanpercentile(arr, axis=...): # -> Any:
    ...

def nankurtosis(arr, axis=...):
    ...

def nanskewness(arr, axis=...):
    ...

MISSING = ...
def sign_test(samp, mu0=...): # -> tuple[Any, Unknown]:
    """
    Signs test

    Parameters
    ----------
    samp : array_like
        1d array. The sample for which you want to perform the sign test.
    mu0 : float
        See Notes for the definition of the sign test. mu0 is 0 by
        default, but it is common to set it to the median.

    Returns
    -------
    M
    p-value

    Notes
    -----
    The signs test returns

    M = (N(+) - N(-))/2

    where N(+) is the number of values above `mu0`, N(-) is the number of
    values below.  Values equal to `mu0` are discarded.

    The p-value for M is calculated using the binomial distribution
    and can be interpreted the same as for a t-test. The test-statistic
    is distributed Binom(min(N(+), N(-)), n_trials, .5) where n_trials
    equals N(+) + N(-).

    See Also
    --------
    scipy.stats.wilcoxon
    """
    ...

NUMERIC_STATISTICS = ...
CATEGORICAL_STATISTICS = ...
_additional = ...
DEFAULT_STATISTICS = ...
class Description:
    """
    Extended descriptive statistics for data

    Parameters
    ----------
    data : array_like
        Data to describe. Must be convertible to a pandas DataFrame.
    stats : Sequence[str], optional
        Statistics to include. If not provided the full set of statistics is
        computed. This list may evolve across versions to reflect best
        practices. Supported options are:
        "nobs", "missing", "mean", "std_err", "ci", "ci", "std", "iqr",
        "iqr_normal", "mad", "mad_normal", "coef_var", "range", "max",
        "min", "skew", "kurtosis", "jarque_bera", "mode", "freq",
        "median", "percentiles", "distinct", "top", and "freq". See Notes for
        details.
    numeric : bool, default True
        Whether to include numeric columns in the descriptive statistics.
    categorical : bool, default True
        Whether to include categorical columns in the descriptive statistics.
    alpha : float, default 0.05
        A number between 0 and 1 representing the size used to compute the
        confidence interval, which has coverage 1 - alpha.
    use_t : bool, default False
        Use the Student's t distribution to construct confidence intervals.
    percentiles : sequence[float]
        A distinct sequence of floating point values all between 0 and 100.
        The default percentiles are 1, 5, 10, 25, 50, 75, 90, 95, 99.
    ntop : int, default 5
        The number of top categorical labels to report. Default is

    Attributes
    ----------
    numeric_statistics
        The list of supported statistics for numeric data
    categorical_statistics
        The list of supported statistics for categorical data
    default_statistics
        The default list of statistics

    See Also
    --------
    pandas.DataFrame.describe
        Basic descriptive statistics
    describe
        A simplified version that returns a DataFrame

    Notes
    -----
    The selectable statistics include:

    * "nobs" - Number of observations
    * "missing" - Number of missing observations
    * "mean" - Mean
    * "std_err" - Standard Error of the mean assuming no correlation
    * "ci" - Confidence interval with coverage (1 - alpha) using the normal or
      t. This option creates two entries in any tables: lower_ci and upper_ci.
    * "std" - Standard Deviation
    * "iqr" - Interquartile range
    * "iqr_normal" - Interquartile range relative to a Normal
    * "mad" - Mean absolute deviation
    * "mad_normal" - Mean absolute deviation relative to a Normal
    * "coef_var" - Coefficient of variation
    * "range" - Range between the maximum and the minimum
    * "max" - The maximum
    * "min" - The minimum
    * "skew" - The skewness defined as the standardized 3rd central moment
    * "kurtosis" - The kurtosis defined as the standardized 4th central moment
    * "jarque_bera" - The Jarque-Bera test statistic for normality based on
      the skewness and kurtosis. This option creates two entries, jarque_bera
      and jarque_beta_pval.
    * "mode" - The mode of the data. This option creates two entries in all tables,
      mode and mode_freq which is the empirical frequency of the modal value.
    * "median" - The median of the data.
    * "percentiles" - The percentiles. Values included depend on the input value of
      ``percentiles``.
    * "distinct" - The number of distinct categories in a categorical.
    * "top" - The mode common categories. Labeled top_n for n in 1, 2, ..., ``ntop``.
    * "freq" - The frequency of the common categories. Labeled freq_n for n in 1,
      2, ..., ``ntop``.
    """
    _int_fmt = ...
    numeric_statistics = ...
    categorical_statistics = ...
    default_statistics = ...
    def __init__(self, data: Union[np.ndarray, pd.Series, pd.DataFrame], stats: Sequence[str] = ..., *, numeric: bool = ..., categorical: bool = ..., alpha: float = ..., use_t: bool = ..., percentiles: Sequence[Union[int, float]] = ..., ntop: bool = ...) -> None:
        ...
    
    @cache_readonly
    def frame(self) -> pd.DataFrame:
        """
        Descriptive statistics for both numeric and categorical data

        Returns
        -------
        DataFrame
            The statistics
        """
        ...
    
    @cache_readonly
    def numeric(self) -> pd.DataFrame:
        """
        Descriptive statistics for numeric data

        Returns
        -------
        DataFrame
            The statistics of the numeric columns
        """
        ...
    
    @cache_readonly
    def categorical(self) -> pd.DataFrame:
        """
        Descriptive statistics for categorical data

        Returns
        -------
        DataFrame
            The statistics of the categorical columns
        """
        ...
    
    def summary(self) -> SimpleTable:
        """
        Summary table of the descriptive statistics

        Returns
        -------
        SimpleTable
            A table instance supporting export to text, csv and LaTeX
        """
        ...
    
    def __str__(self) -> str:
        ...
    


ds = ...
@Appender(str(ds))
def describe(data: Union[np.ndarray, pd.Series, pd.DataFrame], stats: Sequence[str] = ..., *, numeric: bool = ..., categorical: bool = ..., alpha: float = ..., use_t: bool = ..., percentiles: Sequence[Union[int, float]] = ..., ntop: bool = ...) -> pd.DataFrame:
    ...

class Describe:
    """
    Calculates descriptive statistics for data.

    .. deprecated:: 0.12

        Use ``Description`` or ``describe`` instead

    Defaults to a basic set of statistics, "all" can be specified, or a list
    can be given.

    Parameters
    ----------
    dataset : array_like
        2D dataset for descriptive statistics.
    """
    def __init__(self, dataset) -> None:
        ...
    
    def summary(self, stats=..., columns=..., orientation=...):
        """
        Return a summary of descriptive statistics.

        Parameters
        ----------
        stats: list or str
            The desired statistics, Accepts 'basic' or 'all' or a list.
               'basic' = ('obs', 'mean', 'std', 'min', 'max')
               'all' = ('obs', 'mean', 'std', 'min', 'max', 'ptp', 'var',
                        'mode', 'meadian', 'skew', 'uss', 'kurtosis',
                        'percentiles')
        columns : list or str
          The columns/variables to report the statistics, default is 'all'
          If an object with named columns is given, you may specify the
          column names. For example
        """
        ...
    
    def print_summary(self, stats, orientation=...): # -> SimpleTable:
        ...
    
    @Appender(sign_test.__doc__)
    def sign_test(self, samp, mu0=...): # -> tuple[Any, Unknown]:
        ...
    


